diff --git a/node_modules/json-logic-js/logic.js b/node_modules/json-logic-js/logic.js
index 2767087..0ad3247 100644
--- a/node_modules/json-logic-js/logic.js
+++ b/node_modules/json-logic-js/logic.js
@@ -7,7 +7,7 @@ http://ricostacruz.com/cheatsheets/umdjs.html
   if (typeof define === "function" && define.amd) {
     define(factory);
   } else if (typeof exports === "object") {
-    module.exports = factory();
+    module.exports = factory;
   } else {
     root.jsonLogic = factory();
   }
@@ -137,7 +137,16 @@ http://ricostacruz.com/cheatsheets/umdjs.html
           return not_found;
         }
       }
-      return data;
+
+      // return as value and not as reference
+      // for compatibility with iOS/Swift
+      if (Array.isArray(data)) {
+        return [ ...data ]
+      } else if (typeof data === 'object' && data !== null) {
+        return { ...data }
+      } else {
+        return data
+      }
     },
     "missing": function() {
       /*
@@ -189,6 +198,8 @@ http://ricostacruz.com/cheatsheets/umdjs.html
   jsonLogic.truthy = function(value) {
     if (Array.isArray(value) && value.length === 0) {
       return false;
+    } else if (value instanceof Object && Object.keys(value).length === 0) {
+      return false;
     }
     return !! value;
   };
@@ -227,6 +238,10 @@ http://ricostacruz.com/cheatsheets/umdjs.html
       values = [values];
     }
 
+    if (customOperations[op]) {
+      return customOperations[op](values, data)
+    }
+
     // 'if', 'and', and 'or' violate the normal rule of depth-first calculating consequents, let each manage recursion as needed.
     if (op === "if" || op == "?:") {
       /* 'if' should be called with a odd number of parameters, 3 or greater
@@ -471,5 +486,35 @@ http://ricostacruz.com/cheatsheets/umdjs.html
     return false;
   };
 
+  const functions = {};
+  jsonLogic.add_function = function(name, descriptor) {
+    functions[name] = descriptor
+  };
+
+  jsonLogic.get_function = function(name) {
+    return functions[name]
+  };
+
+  jsonLogic.evaluate_function = function(name, parameters) {
+    if (typeof name !== 'string') throw new Error('Function name must be a string')
+    const definition = functions[name]
+
+    if (!definition) {
+      throw new Error(`No such function ${name}`)
+    }
+
+    const scopedData = definition.parameters.reduce((scopedData, param) => {
+      if (parameters[param.name] !== undefined) scopedData[param.name] = parameters[param.name]
+      else scopedData[param.name] = param.default
+      return scopedData
+    }, {})
+    return jsonLogic.apply({ script: definition.logic }, scopedData);
+  };
+
+  const customOperations = {}
+  jsonLogic.add_custom_operation = function(name, code) {
+    customOperations[name] = code
+  };
+
   return jsonLogic;
 }));
